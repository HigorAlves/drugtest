import { DataSource } from 'typeorm'

import { ENV } from '@/env'
import {
	Account,
	Asset,
	AuditLog,
	BankAccount,
	Bill,
	Budget,
	BudgetCategoryLink,
	CashFlowForecast,
	Category,
	CreditAccount,
	CreditCardTransactionMetadata,
	EmergencyFund,
	ExchangeRate,
	Goal,
	Income,
	Investment,
	InvestmentTransaction,
	Liability,
	Loan,
	LoanPayment,
	NetWorthSnapshot,
	Notification,
	Receipt,
	RecurringTransaction,
	Report,
	SharedExpense,
	StripeCustomer,
	StripeInvoice,
	StripePaymentIntent,
	StripeSubscription,
	StripeWebhookEvent,
	Subscription,
	Tag,
	TaxDeductible,
	Transaction,
	TransactionSplit,
	TransactionTag,
	User,
	UserAddress,
	UserEmail,
	UserPhoneNumber,
} from '@/postgres/entity'

const isTest = ENV.NODE_ENV === 'test'
const isDev = ENV.NODE_ENV === 'development'
const isTestOrDev = isTest || isDev

export const AppDataSource = new DataSource({
	type: ENV.TYPEORM_CONNECTION,
	host: ENV.TYPEORM_HOST,
	port: parseInt(ENV.TYPEORM_PORT),
	username: ENV.TYPEORM_USERNAME,
	password: ENV.TYPEORM_PASSWORD,
	database: ENV.TYPEORM_DATABASE,
	useUTC: true,
	synchronize: isTestOrDev,
	logging: isTest,
	migrationsTableName: 'migrations',
	migrations: ['src/postgres/migration/**/!(*.test|*.spec).ts'],
	entities: [
		Account,
		AuditLog,
		BankAccount,
		Budget,
		BudgetCategoryLink,
		Category,
		CreditAccount,
		CreditCardTransactionMetadata,
		ExchangeRate,
		Goal,
		Investment,
		InvestmentTransaction,
		Loan,
		LoanPayment,
		NetWorthSnapshot,
		Notification,
		Receipt,
		RecurringTransaction,
		Report,
		StripeCustomer,
		StripeInvoice,
		StripePaymentIntent,
		StripeSubscription,
		StripeWebhookEvent,
		Tag,
		Transaction,
		TransactionSplit,
		TransactionTag,
		User,
		UserAddress,
		UserEmail,
		UserPhoneNumber,
		Asset,
		Bill,
		CashFlowForecast,
		EmergencyFund,
		Income,
		Liability,
		SharedExpense,
		Subscription,
		TaxDeductible,
	],
	subscribers: [],
})
