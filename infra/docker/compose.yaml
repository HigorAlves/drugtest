name: enterprise

services:
  postgres:
    image: postgres:17-alpine
    container_name: postgres
    shm_size: 128mb
    mem_limit: 512m
    environment:
      POSTGRES_USER: ${TYPEORM_USERNAME:-dev_local}
      POSTGRES_PASSWORD: ${TYPEORM_PASSWORD:-dev_local}
      POSTGRES_DB: ${TYPEORM_DATABASE:-dev_local}
    env_file:
      - ../database/.env.development
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: "0.5"
        reservations:
          memory: 256M
          cpus: "0.25"

  grafana:
    image: grafana/grafana:11.5.2
    container_name: grafana
    shm_size: 128mb
    mem_limit: 512m
    depends_on:
      - loki
      - tempo
      - mimir
    networks:
      - monitoring
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: "0.5"
        reservations:
          memory: 256M
          cpus: "0.25"

  loki:
    image: grafana/loki:2.8.0
    container_name: loki
    command: ["-config.file=/etc/loki/config.yml"]
    volumes:
      - ./loki/config.yml:/etc/loki/config.yml
      - loki-data:/loki
    ports:
      - "3100:3100"
    networks:
      - monitoring
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: "0.5"
        reservations:
          memory: 256M
          cpus: "0.25"

  tempo:
    image: grafana/tempo:2.3.1
    container_name: tempo
    command: ["-config.file=/etc/tempo/config.yml"]
    volumes:
      - ./tempo/config.yml:/etc/tempo/config.yml
      - tempo-data:/tmp/tempo
    ports:
      - "3200:3200" # tempo
      - "4317:4317" # otlp grpc
      - "4318:4318" # otlp http
      - "9411:9411" # zipkin
    networks:
      - monitoring
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: "0.5"
        reservations:
          memory: 256M
          cpus: "0.25"

  mimir:
    image: grafana/mimir:2.11.0
    container_name: mimir
    command: ["-config.file=/etc/mimir/config.yml"]
    volumes:
      - ./mimir/config.yml:/etc/mimir/config.yml
      - mimir-data:/data
    ports:
      - "9009:9009" # API
      - "8080:8080" # HTTP
    networks:
      - monitoring
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: "1.0"
        reservations:
          memory: 512M
          cpus: "0.5"

  otel-collector:
    image: otel/opentelemetry-collector:0.123.0
    container_name: otel-collector
    command: ["--config=/etc/otel-collector-config.yml"]
    volumes:
      - ./otel-collector-config.yml:/etc/otel-collector-config.yml
    ports:
      - "1888:1888" # pprof extension
      - "13133:13133" # health_check extension
      - "55679:55679" # zpages extension
      - "8889:8889" # Metrics exporter
    depends_on:
      - tempo
      - mimir
    networks:
      - monitoring

  prometheus:
    image: prom/prometheus:v2.50.1
    container_name: prometheus
    command:
      - --config.file=/etc/prometheus/prometheus.yml
      - --storage.tsdb.path=/prometheus
      - --web.console.libraries=/etc/prometheus/console_libraries
      - --web.console.templates=/etc/prometheus/consoles
      - --web.enable-lifecycle
      - --enable-feature=remote-write-receiver
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./prometheus/rules:/etc/prometheus/rules
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - monitoring
    depends_on:
      - otel-collector
      - node-exporter
      - mimir
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: "0.5"
        reservations:
          memory: 256M
          cpus: "0.25"

  node-exporter:
    image: prom/node-exporter:v1.7.0
    container_name: node-exporter
    command:
      - "--path.procfs=/host/proc"
      - "--path.sysfs=/host/sys"
      - "--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    ports:
      - "9100:9100"
    networks:
      - monitoring
    deploy:
      resources:
        limits:
          memory: 128M
          cpus: "0.2"
        reservations:
          memory: 64M
          cpus: "0.1"

  alertmanager:
    image: prom/alertmanager:v0.27.0
    container_name: alertmanager
    volumes:
      - ./alertmanager/alertmanager.yml:/etc/alertmanager/alertmanager.yml
      - alertmanager_data:/alertmanager
    command:
      - "--config.file=/etc/alertmanager/alertmanager.yml"
      - "--storage.path=/alertmanager"
    ports:
      - "9093:9093"
    networks:
      - monitoring
    depends_on:
      - prometheus
    deploy:
      resources:
        limits:
          memory: 128M
          cpus: "0.2"
        reservations:
          memory: 64M
          cpus: "0.1"

  blackbox-exporter:
    image: prom/blackbox-exporter:v0.24.0
    container_name: blackbox-exporter
    volumes:
      - ./blackbox-exporter/blackbox.yml:/etc/blackbox_exporter/config.yml
    ports:
      - "9115:9115"
    networks:
      - monitoring
    deploy:
      resources:
        limits:
          memory: 128M
          cpus: "0.2"
        reservations:
          memory: 64M
          cpus: "0.1"

  postgres-exporter:
    image: prometheuscommunity/postgres-exporter:v0.15.0
    container_name: postgres-exporter
    environment:
      DATA_SOURCE_NAME: "postgresql://${TYPEORM_USERNAME:-dev_local}:${TYPEORM_PASSWORD:-dev_local}@postgres:5432/${TYPEORM_DATABASE:-dev_local}?sslmode=disable"
      PG_EXPORTER_EXTEND_QUERY_PATH: "/etc/postgres_exporter/queries.yaml"
    volumes:
      - ./postgres-exporter/queries.yaml:/etc/postgres_exporter/queries.yaml
    ports:
      - "9187:9187"
    networks:
      - monitoring
    depends_on:
      - postgres
    deploy:
      resources:
        limits:
          memory: 128M
          cpus: "0.2"
        reservations:
          memory: 64M
          cpus: "0.1"

  api:
    build:
      context: ../..
      dockerfile: apps/api/Dockerfile
    container_name: api
    shm_size: 128mb
    mem_limit: 512m
    environment:
      NODE_ENV: production
      PORT: 4000
      TYPEORM_HOST: postgres
      TYPEORM_PORT: 5432
      TYPEORM_USERNAME: ${TYPEORM_USERNAME:-dev_local}
      TYPEORM_PASSWORD: ${TYPEORM_PASSWORD:-dev_local}
      TYPEORM_DATABASE: ${TYPEORM_DATABASE:-dev_local}
      TYPEORM_SYNCHRONIZE: "true"
      JWT_SECRET: ${JWT_SECRET:-your-secret-key}
      JWT_EXPIRATION: ${JWT_EXPIRATION:-1h}
      OPENAI_API_KEY: ${OPENAI_API_KEY:-your-openai-api-key}
    ports:
      - "4000:4000"
    depends_on:
      - postgres
    networks:
      - default
      - monitoring
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: "0.5"
        reservations:
          memory: 256M
          cpus: "0.25"

networks:
  monitoring:

volumes:
  postgres_data:
  grafana_data:
  loki-data:
  prometheus_data:
  alertmanager_data:
  tempo-data:
  mimir-data:
